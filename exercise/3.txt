3.1
%rax                R[rax] = 0x100 = 1 * 16 *16 = 256
0x104               M[0x104] = 0xab = 10 * 16 + 11 = 171
$0x108              0x108 = 1 * 16 * 16  + 8 = 256 + 8 = 264
(%rax)              M[R[rax]] = M[0x100] = 0xFF = 15 * 16 + 15 = 235
4(%rax)             M[4 + R[rax]] = M[4 + 0x100] = M[0x104] = 0xab = 171
9(%rax, %rdx)       M[9 + R[rax] + R[rdx]] = M[9 + 0x100 + 0x3] = M[0x10c] = 0x11 = 16 + 1 = 17
260(%rcx, %rdx)     M[260 + R[rcx] + R[rdx]] = M[16*16+4 + 0x1 + 0x3] = M[0x108] = 0x13 = 16 + 3 = 19
0xFC(, %rcx, 4)     M[0xfc + R[rcx] * 4] = M[0xfc + 0x4] = M[0x100] = 0xff = 16 * 16 - 1 = 255
(%rax, %rdx, 4)     M[R[rax] + R[rdx] * 4] = M[0x100 + 0x3 * 4] = M[0x10c] = 0x11 = 17

3.2
movl     %eax,       %rap
movw     (%rax),     %dx
movb     $0xFF,      %bl
movb     (%rsp,%rdx,4), %dl
movq     (%rdx),     %rax
movw     %dx,        (%rax)

3.3
movq %rax,$0x123    destiny is immediate, while it must be a register or memory

3.4
src_t           dest_t          instrument
long            long            movq(%rdi),%rax
                                movq %rax,(%rsi)
char            int             movl(%rdi),%eax
                                movl%eax,(%rsi)
char            unsigned        movl(%rdi),%eax
                                movl%eax,(%rsi)
unsigned char   long            movq(%rdi),%rax
                                movq%rax,(%rsi)
int             char            movb(%rdi),%al
                                movb%al,(%rsi)
unsigned        unsigned char   movb(%rdi),%al
                                movb%al,(%rsi)
char            short           movw(%rdi),%ax
                                movw%ax,(%rsi)

3.5
long decode1(long *xp, long *yp, long *zp) {
    x = *xp;
    y = *yp;
    z = *zp;

    *yp = x;
    *zp = y;
    *xp = z;

    return z;
}

3.6
%rax = x
%rcx = y

leaq    6(%ax),%rdx         6 + (x & 0xFF)
leaq    (%rax,%rcx),%rdx    x + y
leaq    (%rax,%rcx,4),%rdx  x + 4 * y
leaq    7(%rax,%rax,8),%rdx 7 + x + 8 * x = 7 + 9 * x
leaq    0xA(,%rcx,4),%rdx   0xA + 4 * y
leaq    9(%rax,%rcx,2),%rdx 9 + x + 2 * y

3.7
long scale2(long x, long y, long z) {
    t = 5 * x;
    t = t + 2 * y;
    t = t + 8 * z;

    t = 5 * x + 2 * y + 8 * z;

    return t;
}

3.8
0x100   0xFF
0x108   0xAB
0x110   0x13
0x118   0x11
%rax    0x100
%rcx    0x1
%rdx    0x3

addq %rcx,(%rax)    M[R[rax]]=M[0x100]    0xFF + 0x1 = 0x100
subq %rdx,8(%rax)   M[8+R[rax]]=M[0x108]    0xAB - 0x3 = 0xA8
imulq $16,(%rax,%rdx,8) M[0x100+8*0x3]=M[0x100+0x18]=M[0x118]   0x11*16=0x110
incq 16(%rax)   M[16+R[rax]]=M[0x10+0x100]=M[0x110] 0x13+1=0x14
decq %rcx   R[rcx]  0x1-1=0x0
subq %rdx,%rax  R[rax]  0x100-0x3=0xFD

3.9
sal 4,%rax
sar %cl,%rax

3.10
long arith2(long x, long y, long z) {
    t1 = x | y;
    t2 = t1 * 8;
    t3 = 2^64 - t2;  ?
    t4 = z - t3;
    return t4;
}

3.11
A. x = 0;
B. movq $0,%rdx
C. movq need 8 bytes, xorq need 8 bytes.   ?

3.12
void uremdiv(unsigned long x, unsigned long y, unsigned long *qp, unsigned long *rp)
x in %rdi   y in %rsi   qp in %rdx  rp in %rcx
uremdiv:
    movq %rdx,%r8       Copy qp
    movq %rdi,%rax      Move x to lower 8 bytes of dividend
    xorq %rdx,%rdx      Zero %rdx
    divq %rsi           divide by y
    movq %rax,(%r8)     store quotient at qp
    movq %rdx,(%rcx)    store remainder at rp
    ret

3.13
A. data_t = [int, float]    comp = <
B. data_t = [short]         comp = >=
C. data_t = [char]          comp = <=
D. data_t = [double, long]  comp = !=

3.14
A. data_t = [double, long]  test = >=
B. data_t = [short]         test = ==
C. data_t = [char]          test = >
D. data_t = [int, float]    test = !=

3.15
A. 4003fc
B. 400431
C. ja:400545    pop:400547
D. 4005ed

3.16
A.
void cond(long a, long *p) {
    if (!p)
        goto L1;
    if (*p >= a)
        goto L1;
    *p = a;

L1:
    return; ?
}

B. 汇编一次只能判断一种对比

3.17
    t = test - expr;
    if (t)
        goto true;
    else-statement
    goto done;
true:
    then-statement
done:

A. ?
long gotodiff_se()
{
    long result;
    if (x >= y)
        goto x_ge_y;
    lt_cnt++;
    result = y -x;
    goto done;

x_ge_y:
    ge_cnt++;
    result = x - y;
    goto done;

done:
    return result;
}

B. 两个分支有很多相同的操作可以使用这种规则

3.18
long test(long x, long y, long z) {
    long val = x * y;
    if (x >= -3) {
        if (x <= 2)
            val = x * y + z;
        else
            val = x * z;
    } else if (z >= y)
        val = y * z
    return val;
}

3.19
A.
Tok = 16
Tran = 31
Tok + 0.5 * Tmp = Tran => Tmp = (31 -16) * 2 = 30
B. Terr = 16 + 30 = 46

3.20
A. /
B. 
arith:
    leaq    7(%rdi), %rax   #x<0,val = x+bias,bias=2^3 -1 =7
    testq   %rdi, %rdi
    cmovns  %rdi, %rax      #if x >=0, val = x
    sarq    $3, %rax        val >>= 3  = x / 8

3.21
long test(long x, long y) {
    long val = y - x;
    if (y <= 0) {
        if (y <= -2)
            val = x + y;
        else
            val = 8 * x;
    } else if (x >= y)
        val = x + y;
    return val;
}

3.22
A. n! = n * (n - 1) * ... * 1 = 2^32 -1 => n(max) = ?
B. long64(max) = 2^(2^15 -1)    ?

3.23
A.  x in %rax    y in %rcx   z in %rdx
B.  leaq 1(%rcx,%rax), %rax   *p直接等于x (*p)++=>x+=1
C.  
long dw_loop(long x)
x initially in %rdi
dw_loop:
    movq    %rdi, %rax      Set result = x
    movq    %rdi, %rcx      Set y = x
    imulq   %rdi, %rcx      Compute y = x * x
    leaq    (%rdi,%rdi), %rdx       Set n = 2 * x
.L2:
    leaq    1(%rcx,%rax), %rax      Compute result = x + x * x + 1
    subq    $1, %rdx        Compute n = n - 1
    testq   %rdx, %rdx
    jg      .L2             if n > 0, goto .L2
    rep; ret                Return

3.24
long loop_while(long a, long b) {
    long result = 1
    while (a < b) {
        result = x * (x + y);
        a += 1;
    }
    return result;
}

3.25
long long_loop_while2(long a, long b) {
    long result = b;
    while (b > 0) {
        result = result * a;
        b = b - a;
    }
    return result;
}

3.26
A. 跳转到中间 （junmp to middle）
B.  ? 
long fun_a(unsigned long x) {
    long val = 0;
    while (x != 0) {
        val ^= x;
        x >>= 1;
    }
    return val;
}
C. ??

3.27
long fact_for_gd_goto(long n) {
    long i = 2;
    long result = 1;
    if (i > n)
        goto done;
loop:
    result *= i;
    i++;
    if (i <= n)
        goto loop;
done:
    return result;
}

3.28
A.
long fun_b(unsigned long x) {
    long val = 0;
    long i;
    for (i = 64; i != 0; i--) {
        val = (val * val) | (x + 1);
        x /= 2;
    }
    return val;
}
B.循环条件是确定值，初始恒为true，所以不需要初始测试
C. ?

3.29
A. i++不会执行
B.
if (i & 1) {
    i++;
    goto test;
}

3.30
A.
.L2为default，也即此处的case是轮空的
[-1, 0, 1, 2, 4, 5, 7]
B. L5,L7

3.31
void switcher(long a, long b, long c, long *dest)
{
    long val;
    switch(a) {
    case 5:         #.L7
        c = b^15;
    case 0:         #.L3
        val = c + 112;
        break;
    case 2:
    case 7:         #.L5
        val = (b + c) * 4;
        break;
    case 4:         #.L6
        val = a;
        break;
    default:        #.L2
        val = b;
    }
    *dest = val;
}

3.32
PC          指令        %rdi    %rsi    %rax    $rsp            *%rsp       描述    
0x400560    callq       10      -       -       0x7fffffffe820  -           调用firts(10)
0x400548    lea         10      -       -       0x7fffffffe818  0x400565    x+1
0x40054c    sub         10      11      -       0x7fffffffe818  0x400565    x-1
0x400550    callq       9       11      -       0x7fffffffe818  0x400565    调用last(9,11)
0x400540    mov         9       11      -       0x7fffffffe810  0x400555    val=u
0x400543    imul        9       11      9       0x7fffffffe810  0x400555    u*v
0x400547    retq        9       11      99      0x7fffffffe810  0x400555    last返回
0x400555    repz retq   9       11      99      0x7fffffffe818  0x400565    first返回
0x400565    mov         9       11      99      0x7fffffffe820  -           val=99

3.33
procprob(int a, char b, long *u, char *v)
procprob(int b, char a, long *v, char *u)

3.34
A. a0-a5
B. a6,a7
C. 只有6个寄存器是被调用者保存寄存器%rbx,%rbp,%r12-%r15

3.35
A. 递归调用的x值
B.
long rfun(unsigned long x) {
    if (x == 0)
        return 0;
    unsigned long nx = nx / 4;
    long rv = rfun(nx);
    return x + rv;
}

3.36
short   S[7]
short   *T[3]
short   **U[6]
int     V[8]
double  *W[4]

S   2   14  Xs  Xs+2i
T   8   24  Xt  Xt+8i
U   8   48  Xu  Xu+8i
V   4   32  Xv  Xv+4i
W   8   32  Xw  Xw+8i

3.37
S+1     short *     Xs+2        movq %rdx,%rax
S[3]    short       M[Xs+6]     movw 6(%rdx),%ax
&S[i]   short *     Xs+2i       leaq (%rdx,%rcx,2),%rax
S[4*i+1] short      M[Xs+2+8i]  movw 2(%rdx,%rcx,8),%ax
S+i-5   short *     Xs+2i-10    leaq -10(%rdx,%rcx,2),%rax

3.38
%rdx = 7i+j
%rax = 5j
%rdi = i + 5j
%rax = Q + 8 * (i + 5j) + P + 8 * (7i + j)
     = Q + 8 * (i + M * j) + P + 8 * (N * i + j);
M = 5;  N = 7;

3.39
T D[R][C]
&D[i][j] = Xd + L(C*i + j)
int *Aptr = &A[i][0] = Xa + 4(N*i + 0) = Xa + 4N*i = Xa + 64 * i
          => leaq (%rdi,%rdx,64),%rdi
int *Bptr = &B[0][k] = Xb + 4(0 + k) = Xb + 4 * k
int *Bend = &B[N][k] = Xb + 4(16 * 16 + k) = Xb + 1024 + 4 * k

3.40
void fix_set_diag(fix_matrix A, int val) {
    int result = 0;
    do {
        *(A + result) = val;
    } while (result != (N+1)*(N+1));
    return result;
}

3.41
A. 
p:      0
s.x:    8
s.y:    12
next:   16
B.  24
C. ?
void sp_init(struct prob *sp) {
    sp->s.x = sp->s.y;
    sp->p   = sp->s.x;
    sp->next= sp;
}

3.42
A.
struct ELE {
    long v;
    struct ELE *p;
}
long fun(struct ELE *ptr) {
    long result = 0;
    while (ptr) {
        result += ptr->v;
        ptr = ptr->p;
    }
    return result;
}

3.43
up->t1.v    short   movw 8(%rdi),%ax   movw %ax,(%si)
&up->t1.w   short * leaq 10(%rdi),%rax movq %rax,(%rsi)
up->t2.a    int *   movq %rdi,%rax    movq %rax,(%rsi)
up->t2.a[up->t1.u]  int     movq (%rdi),%rax    movq (%rdi,%rax,4),rax  movq %rax,(%rsi)
*up->t2.p   char    movq 8(%rdi),%rax   movb (%rax),%al movb %al,(%rsi)

3.44
A.  0   4   8   12  16  4字节对齐
B.  0   4   5   8   16  8字节对齐
C.  0   6   10  2字节对齐
D.  0   16  40  8字节对齐
E.  0   20  36  8字节对齐

3.45
A.
a   b   c   d   e   f   g   h
0   8   16  24  28  32  40  48
B.  56
C.  
struct {
    char        *a;
    double      c;
    long        g;
    float       e;
    int         h;
    short       b;
    char        d;
    char        f;
}
0   8   16  24  28  32  34  35
40

3.46
01 23 45 67 89 AB CD EF         push %rbx
38 39 30 31 32 33 34 35         89012345
30 31 32 33 34 35 36 37         01234567   %rsp

34 00 00 00 00 40 00 76         return location
36 37 38 39 30 31 32 33         push %rbx
38 39 30 31 32 33 34 35         89012345
30 31 32 33 34 35 36 37         01234567   %rsp

0x3400000000400076

3.47
A.  2 * 16^3 = 2^13 = 1024 * 2^3 = 8192
B.  n = 2^13 / 2^7 = 2^6 = 64

3.48
A.  
buf:    %rsp        %rsp + 16
v:      %rsp + 24   %rsp + 8
canary: -           %rsp + 40
B.重新排列之后，buf超过24byte就会改写canary，报异常；不改需要40byte

3.49
A.  
leaq    22(,%rdi,8), %rax   8n + 22 = 8n + 16 + 6
andq    $-16, %rax  -16 = 0xfffffff0   => %rax = 8n + 16
subq    %rax, %rsp
B.  ?
leaq    7(%rsp), %rax
shrq    $3, %rax
leaq    0(,%rax,8), %r8
C.
5   2065    2009    2016    9   7
6   2064    2016    2016    16  0
D.  16字节对齐









































