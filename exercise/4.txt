4.1
.pos 0x100
    irmovq  $15,%rbx
    rrmovq  %rbx,%rcx
loop: #0x10C
    rmmovq  %rcx,-3(%rbx)
    addq    %rbx,%rcx
    jmp     loop

30 F3 0F 00 00 00 00 00 00 00
20 31
40 13 FD FF FF FF FF FF FF FF
60 31
70 0C 01 00 00 00 00 00 00

4.2
A.  
irmovq $-4 ,%rbx   #30 f3 fc ff ff ff ff ff ff ff
rmmovq %rsi,0x800(%rbx) #40 63 00 08 00 00 00 00 00 00
B.  
pushq %rsi #a0 6f
call .loop #80 0c 02 00 00 00 00 00 00    00
.loop   #0x20c
irmovq $10,%rbx #30 f3 0a 00 00 00 00 00 00 00    90多余
ret  #90
C.
mrmovq 7(%rsp),%rbp #50 54 07 00 00 00 00 00 00 00
nop #10              f0 b0 1f 多余
popq %rcx #b0 1f
D.
.loop   #0x400
subq %rcx,%rbx #61 13
je .loop #73      00 04 00 00 00 00 00 00           00多余
halt #00
E.
xorq %rsi,%rdx #63 62
pushq %rax #a0 f0        f0有误，低位必须为f，0f正确

4.3
iaddq $8,%rdi       c0 f7 08 00 00 00 00 00 00 00
iaddq $-1,%rsi      c0 f6 ff ff ff ff ff ff ff ff

4.4
x86-64 code:					
rsum:							
        testq   %rsi, %rsi			
        jle     .L3
        pushq   %rbx
        movq    %rdi, %rbx
        subq    $1, %rsi
        leaq    8(%rdi), %rdi
        call    rsum
        addq    (%rbx), %rax
        jmp     .L2
.L3:
        movl    $0, %eax
        ret
.L2:
        popq    %rbx
        ret

Y86-64 code:
rsum:
	andq    %rsi,%rsi
    jle     exit
    pushq   $rbx
    rrmovq  %rdi,%rbx
    irmovq  $1,%r8
    subq    %r8,%rsi
    irmovq  $8,%r9
    addq    %r9,%rdi
    call    rsum
    mrmovq  (%rbx),%rbx
    addq    %rbx,%rax
    jmp     L2
exit:
    irmovq  $0,%eax
    ret
L2:
    popq    %rbx
    ret

4.5
absSum:
...
loop:
mrmovq  (%rdi),%r10
andq    %r10,%r10
jl      neg
addq    %r10,%rax
jmp     continue

neg:
subq    %r10,%rax
jmp     continue

continu:
addq    %r8,%rdi
addq    %r9,%rsi

4.6
...
addq    %r10,%rax
andq    %r10,%r10
subq    %r10,%rax
subq    %r10,%rax

4.7
压入%rsp原始值

4.8
%rsp+8再弹出原始值

4.9
bool xor = (a && !b) || (!a && b)
和eq是补集

4.10
xor--->
xor--->or--->not
xor--->

4.11
word min3 = [
    a <= b && a <= c    :   A;
    b <= c              :   B;
    1                   :   C;
];

4.12
word middle3 = [
    a <= b && a >= c    :   A
    a <= b && b <= c    :   B
    a <= b              :   C
    a >= b && a <= c    :   A
    a >= b && b >= c    :   B
    a >= b              :   C
];

4.13
30f4
icode:ifun <- M1[0x016] = 3:0
rA:rB <- M1[0x017] = f:4
valC <-- M8[0x018] = 128
valP <-- 0x020
valE <-- 0 + 128 = 128
R[rB] <-- 128
Pc <-- valP = 0x020

4.14
0x02c: b00f
icode:ifun <-- M1[0x02c] = b:0
rA:rB <-- M1[0x02d] = 0:f
valP <-- 0x02e

valA <-- 120
valB <-- 120

valE <-- 120 + 8 = 128
valM <-- M8[120] = 9

R[%rsp] <-- 128
R[rA] <-- 9

PC <-- 0x02e

4.15
push原始值  一致

4.16
%rsp = 原始保存在%rsp的值   一致

4.17
执行    Cnd <-- Cond(CC, ifun)
写回    Cnd ? R[rB] <-- valE

4.18
0x037:  80 41 00 00 00 00 00 00 00
取址    icode:ifun <-- M1[0x037] = 8:0
        valC <-- M8[0x038] = 0x041
        valP <-- PC + 9 = 0x040
译码    valB <-- R[%rsp] = 128
执行    valE <-- valB + (-8) = 120
访存    M8[valE] <-- valP = 0x040
写回    R[%rsp] <-- 120
更新PC  PC <-- 0x041

寄存器%rsp-8,值为下行指令地址，PC指向跳转地址

4.19
bool need_valC = icode in {IIRMOVQ,IRMMOVQ,IMRMOVQ,IJXX,ICALL}

4.20
word srcB = [
    icode in {IOPQ,} : rB;
    icode in {IPUSHQ, IPOPQ, ICALL, IRET} : RRSP;
    1 : RNONE;
];

4.21
word desM = [
    icode in {IPOPQ} : rA
    1 : RNONE
];

4.22
desM

4.23
word aluB = [
    icode in {IOPQ, IPUSHQ, IPOPQ, ICALL, IRET} : valB;
    icode in {IRRMOVQ, IIRMOVQ} : 0;
];

4.24
word dstE = [
    cond = 1: rB;
    1 : RNONE;
];

4.25
word mem_data = [
    icode in {IRMMOVQ, IPUSHQ} : valA;
    icode in {ICALL} : valP;
];

4.26
bool mem_write = icode in { IRMMOVQ, IPUSHQ, ICALL };

4.27 ?
SAOK,SADR,SINS,SHLT
word stat = [
    imem_error == 1 : SADR;
    dmem_error == 1 : SADR;
    instr_valid == 0 : SINS;
    icode == IHCL : SHLT;
    1 : SAOK;
];

4.28
A.  
middle of C and D   
tuntu = 1000 / (170 + 20) = 5.26GIPS
yanchi = (170 + 20) * 2 ps = 380ps
B.
B | C D | E
tuntu = 1000 / (110 * 20) = 7.69GIPS
latent = (110 * 20) * 3 ps = 390ps
C.
A | B C | D | E F
tuntu = 1000 / (90 + 20) = 9.09GIPS
latent = (90 + 20) * 4 ps = 440ps
D.
五阶段
A | B | C | D | E F
tuntu = 1000 / (80 + 20) = 10GIPS
latent = (80 + 20) * 5 ps = 500 ps

4.29
A.
tuntu = 1000 / (300/k + 20)
latent = (300/k + 20) * k
B.
tuntuM = 50 GIPS

4.30
SAOK SADR SINS SHLT
word f_stat = [
    icode = IHALT : SHLT;
    ...  ?
    1 : SAOK;
];

4.31
word d_dstE = [
    icode in [IIRMOVQ, IRRMOVQ, IOPQ] : valB;
    icode in [IPUSH, IPOPQ, ICALL, IRET] : RRSP;
    1 : RNONE;
];

4.32
第三行和第四行互换不影响rrmovq指令的执行，指令匹配第二行的情况

4.33
popq %rsp
rrmovq %rsp,$rsa

W_dstE = W_dstM -8,所以译码小了8

4.34
word d_valB = [
    d_srcB == e_dstE : e_valE;
    d_srcB == M_dstM : m_valM;
    d_srcB == M_dstE : M_valE;
    d_srcB == W_dstM : W_valM;
    d_srcB == W_dstE : W_valE;
    1 : d_rvalB;
];

4.35
#pushq %rsp
#e_dstE = E_dstE = 8

cmovne

4.36
word m_stat = [
    d_mem_error: SADR;    ???
    1 :   M_stat;
];

4.37
irmovq $1,%rax;
irmovq $10,%rbx;
subq   %rax,%rbx;
je     l2
l2:
ret

4.38
irmovq $1,%rax
rrmonvq %rax,%rdx
ret

4.39
bool D_stall = 
E_icode in { IMRMOVQ, IPOPQ } && E_dstM in { d_srcA, d_srcB }

4.40
bool E_bubble = 
(E_icode == IJXX && !e_Cnd) || (E_icode in {IMRMOVQ, IPOPQ} && E_dstM in {d_srcA, d_srcB})

4.41 ??
bool set_cc = m_stat in {SADR, SINS, SHLT}

4.42
bool M_bubble =
bool W_stall = 


























































